# Template C++ Application

# This template allows you to validate your C++ application.
# The workflow allows running tests and code linting on the default branch.


stages:
  - build_image
  - lint
  - build
  - test

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""   # ważne dla docker:dind, żeby nie blokował certyfikatów

# Budowanie obrazu CI i push do lokalnego GitLab Container Registry
build_ci_image:
  stage: build_image
  image: docker:20.10
  services:
    - docker:dind
  script:
    - echo "Logging into GitLab Container Registry..."
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/wchat-ci:latest || true
    - docker build  --cache-from=$CI_REGISTRY_IMAGE/wchat-ci:latest -t $CI_REGISTRY_IMAGE/wchat-ci:latest -t $CI_REGISTRY_IMAGE/wchat-ci:$CI_COMMIT_SHORT_SHA -f Dockerfile.ci .
    - docker push $CI_REGISTRY_IMAGE/wchat-ci:latest
    - docker push $CI_REGISTRY_IMAGE/wchat-ci:$CI_COMMIT_SHORT_SHA
  rules:
    - changes:
        - Dockerfile.ci
        - .gitlab-ci.yml

clang_check:
  stage: lint
  image: $CI_REGISTRY_IMAGE/wchat-ci:latest
  script:
    - make clang-check

cpplint:
  stage: lint
  image: $CI_REGISTRY_IMAGE/wchat-ci:latest
  script:
    - make cpplint

cppcheck:
  stage: lint
  image: $CI_REGISTRY_IMAGE/wchat-ci:latest
  script:
    - make cppcheck

build_app:
  stage: build
  image: $CI_REGISTRY_IMAGE/wchat-ci:latest
  script:
    - make compile
  artifacts:
    paths:
      - build/
    expire_in: 1h

test_unit:
  stage: test
  image: $CI_REGISTRY_IMAGE/wchat-ci:latest
  script:
    - make test-unit
  needs: ["build_app"]

test_app:
  stage: test
  image: $CI_REGISTRY_IMAGE/wchat-ci:latest
  script:
    - make test-app
  needs: ["build_app"]
