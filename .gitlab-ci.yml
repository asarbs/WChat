# Template C++ Application

# This template allows you to validate your C++ application.
# The workflow allows running tests and code linting on the default branch.


stages:
  - build_image
  - lint
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""   # waÅ¼ne dla docker:dind, Å¼eby nie blokowaÅ‚ certyfikatÃ³w

# Budowanie obrazu CI i push do lokalnego GitLab Container Registry
build_ci_image:
  stage: build_image
  image: docker:20.10
  services:
    - docker:dind
  script:
    - echo "Logging into GitLab Container Registry..."
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/wchat-ci:latest || true
    - docker build  --cache-from=$CI_REGISTRY_IMAGE/wchat-ci:latest -t $CI_REGISTRY_IMAGE/wchat-ci:latest -t $CI_REGISTRY_IMAGE/wchat-ci:$CI_COMMIT_SHORT_SHA -f Dockerfile.ci .
    - docker push $CI_REGISTRY_IMAGE/wchat-ci:latest
    - docker push $CI_REGISTRY_IMAGE/wchat-ci:$CI_COMMIT_SHORT_SHA
  rules:
    - changes:
        - Dockerfile.ci
        # - .gitlab-ci.yml

# clang_check:
#   stage: lint
#   image: $CI_REGISTRY_IMAGE/wchat-ci:latest
#   script:
#     - make clang-check

# cpplint:
#   stage: lint
#   image: $CI_REGISTRY_IMAGE/wchat-ci:latest
#   script:
#     - make cpplint

# cppcheck:
#   stage: lint
#   image: $CI_REGISTRY_IMAGE/wchat-ci:latest
#   script:
#     - make cppcheck

# build_app:
#   stage: build
#   needs: ["clang_check", "cpplint", "cppcheck"]
#   image: $CI_REGISTRY_IMAGE/wchat-ci:latest
#   script:
#     - make compile-server
#   artifacts:
#     paths:
#       - build/linux/bin/WChat_SERVER
#     expire_in: 1h

# test_unit:
#   stage: test
#   image: $CI_REGISTRY_IMAGE/wchat-ci:latest
#   script:
#     - make test-unit
#   needs: ["build_app"]
#   artifacts:
#     when: always
#     expire_in: 1h
#     paths:
#       - build/test-unit-results.xml
#     reports:
#       junit:
#         - build/test-unit-results.xml

# test_app:
#   stage: test
#   image: $CI_REGISTRY_IMAGE/wchat-ci:latest
#   script:
#     - make test-app
#   needs: ["build_app"]
#   artifacts:
#     when: always
#     expire_in: 1h
#     paths:
#       - build/test-app-results.xml
#     reports:
#       junit:
#         - build/test-app-results.xml

sync_to_github:
  stage: deploy
  only:
    - master
  # needs: ["build_app", "test_app", "test_unit"]
  variables:
    GIT_DEPTH: 0            # zapewnia peÅ‚nÄ… historiÄ™ (potrzebne do push --mirror)
  before_script:
    - apt-get update -qq
    - apt-get install -y --no-install-recommends openssh-client git ca-certificates
    - mkdir -p ~/.ssh
    - echo "$GITHUB_SSH_KEY" | base64 -d > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - ssh -i ~/.ssh/id_ed25519 -T git@github.com || true
    - git config --global user.name "GitLab CI"
    - git config --global user.email "ci@${CI_SERVER_HOST}"
  script:
    - echo "ðŸš€ Push to GitLab..."
    - git remote remove github 2>/dev/null || true
    - git remote add github git@github.com:asarbs/WChat.git
    - git fetch --unshallow || true
    - git push --mirror github
